// <auto-generated />
using System;
using Hocomm.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hocomm.Migrations
{
    [DbContext(typeof(PgSqlContext))]
    [Migration("20230605203752_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hocomm.Database.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("FlatNr")
                        .HasColumnType("integer");

                    b.Property<string>("HomeNr")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EvendDateTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventDateFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("EveryMonth")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EveryWeek")
                        .HasColumnType("boolean");

                    b.Property<bool?>("EveryYear")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EvidenceItemId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Friday")
                        .HasColumnType("boolean");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRecurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Monday")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EvidenceItemId");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("CalendarEvent");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CalendarEventMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.HasIndex("MemberId");

                    b.ToTable("CalendarEventMember");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<int>("CompanyType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Nip")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CostInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("DueTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GrossValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoinceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssuedByCompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("NetValue")
                        .HasColumnType("double precision");

                    b.Property<int>("VatValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HousingCommunityId");

                    b.HasIndex("IssuedByCompanyId");

                    b.ToTable("CostInvoice");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CostOther", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<double>("GrossValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoinceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("CostOther");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("EvidenceItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeeNr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PaidTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceItemId");

                    b.ToTable("EvidenceFee");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceFeeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("EvidenceFeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceFeeId");

                    b.ToTable("EvidenceFeeItem");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("FloorNr")
                        .HasColumnType("integer");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonCount")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("EvidenceItems");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceItemMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvidenceItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentEvidenceItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EvidenceItemId");

                    b.HasIndex("HousingCommunityId");

                    b.HasIndex("OwnedByUserId");

                    b.HasIndex("ParentEvidenceItemId");

                    b.ToTable("EvidenceItemMembers");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("EvidenceTypes");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("FailureReports");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReportAttachement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FailureReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FailureReportId");

                    b.ToTable("FailureReportAttachements");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReportComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("FailureReportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("FailureReportId");

                    b.HasIndex("FromUserId");

                    b.ToTable("FailureReportComments");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.HousingCommunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("HousingCommunities");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.InternalMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("HousingCommunityId");

                    b.HasIndex("ToUserId");

                    b.ToTable("InternalMessages");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.InternalMessageConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InternalMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecievedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("InternalMessageId");

                    b.HasIndex("RecievedByUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("InternalMessageConnections");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Resolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("Resolution");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.ResolutionVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("ResolutionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResolutionId");

                    b.ToTable("ResolutionVote");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.UserMeter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvidenceItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserMeterTypeId")
                        .HasColumnType("uuid");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EvidenceItemId");

                    b.HasIndex("HousingCommunityId");

                    b.HasIndex("UserMeterTypeId");

                    b.ToTable("UserMeters");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.UserMeterType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("EvidenceItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HousingCommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("EvidenceItemId");

                    b.HasIndex("HousingCommunityId");

                    b.ToTable("UserMeterTypes");
                });

            modelBuilder.Entity("HousingCommunityUser", b =>
                {
                    b.Property<Guid>("HousingCommunitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("HousingCommunitiesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("HousingCommunityUser");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Announcement", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "Author")
                        .WithMany("Announcements")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("Announcements")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CalendarEvent", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "Author")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.EvidenceItem", "EvidenceItem")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("EvidenceItemId");

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("EvidenceItem");

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CalendarEventMember", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.CalendarEvent", "CalendarEvent")
                        .WithMany("CalendarEventMembers")
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.User", "Member")
                        .WithMany("CalendarEventMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Company", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CostInvoice", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("CostInvoices")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.Company", "IssuedByCompany")
                        .WithMany("CostInvoices")
                        .HasForeignKey("IssuedByCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HousingCommunity");

                    b.Navigation("IssuedByCompany");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CostOther", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("CostOthers")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceFee", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.EvidenceItem", "EvidenceItem")
                        .WithMany("EvidenceFees")
                        .HasForeignKey("EvidenceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvidenceItem");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceFeeItem", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.EvidenceFee", "EvidenceFee")
                        .WithMany("EvidenceFeeItems")
                        .HasForeignKey("EvidenceFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvidenceFee");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceItem", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "CreatedByUser")
                        .WithMany("EvidenceItems")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("EvidenceItems")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceItemMember", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "CreatedByUser")
                        .WithMany("EvidenceItemMemberCreatedBy")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.EvidenceItem", "EvidenceItem")
                        .WithMany("EvidenceItemMembers")
                        .HasForeignKey("EvidenceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", null)
                        .WithMany("EvidenceItemMembers")
                        .HasForeignKey("HousingCommunityId");

                    b.HasOne("Hocomm.Database.Entities.User", "OwnedByUser")
                        .WithMany("EvidenceItemMemberOwnedByUser")
                        .HasForeignKey("OwnedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.EvidenceItem", "ParentEvidenceItem")
                        .WithMany("ParentEvidenceItemMembers")
                        .HasForeignKey("ParentEvidenceItemId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EvidenceItem");

                    b.Navigation("OwnedByUser");

                    b.Navigation("ParentEvidenceItem");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceType", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "CreatedByUser")
                        .WithMany("EvidenceTypeItems")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("EvidenceTypeItems")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReport", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "FromUser")
                        .WithMany("FailureReports")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("FailureReports")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReportAttachement", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "CreatedBy")
                        .WithMany("FailureReportAttachements")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.FailureReport", "FailureReport")
                        .WithMany("FailureReportAttachements")
                        .HasForeignKey("FailureReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("FailureReport");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReportComment", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.FailureReport", "FailureReport")
                        .WithMany("FailureReportsComments")
                        .HasForeignKey("FailureReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.User", "FromUser")
                        .WithMany("FailureReportsComments")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FailureReport");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.HousingCommunity", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.Address", "Address")
                        .WithMany("HousingCommunities")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.InternalMessage", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "FromUser")
                        .WithMany("FromInternalMessages")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("InternalMessages")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.User", "ToUser")
                        .WithMany("ToInternalMessages")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("HousingCommunity");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.InternalMessageConnection", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "FromUser")
                        .WithMany("FromUserInternalMessageConnections")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.InternalMessage", "InternalMessage")
                        .WithMany("InternalMessageConnections")
                        .HasForeignKey("InternalMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.User", "RecievedByUser")
                        .WithMany("RecievedByUserInternalMessageConnections")
                        .HasForeignKey("RecievedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.User", "ToUser")
                        .WithMany("ToUserInternalMessageConnections")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("InternalMessage");

                    b.Navigation("RecievedByUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Resolution", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "CreatedBy")
                        .WithMany("Resolutions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("Resolutions")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.ResolutionVote", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "Author")
                        .WithMany("ResolutionVotes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.Resolution", "Resolution")
                        .WithMany("ResolutionVotes")
                        .HasForeignKey("ResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.User", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.UserMeter", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.User", "CreatedBy")
                        .WithMany("UserMeters")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.EvidenceItem", "EvidenceItem")
                        .WithMany("UserMeters")
                        .HasForeignKey("EvidenceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", null)
                        .WithMany("UserMeters")
                        .HasForeignKey("HousingCommunityId");

                    b.HasOne("Hocomm.Database.Entities.UserMeterType", "UserMeterType")
                        .WithMany("UserMeters")
                        .HasForeignKey("UserMeterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("EvidenceItem");

                    b.Navigation("UserMeterType");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.UserMeterType", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.EvidenceItem", null)
                        .WithMany("UserMeterTypes")
                        .HasForeignKey("EvidenceItemId");

                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", "HousingCommunity")
                        .WithMany("UserMeterTypes")
                        .HasForeignKey("HousingCommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HousingCommunity");
                });

            modelBuilder.Entity("HousingCommunityUser", b =>
                {
                    b.HasOne("Hocomm.Database.Entities.HousingCommunity", null)
                        .WithMany()
                        .HasForeignKey("HousingCommunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hocomm.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Address", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("HousingCommunities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.CalendarEvent", b =>
                {
                    b.Navigation("CalendarEventMembers");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Company", b =>
                {
                    b.Navigation("CostInvoices");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceFee", b =>
                {
                    b.Navigation("EvidenceFeeItems");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.EvidenceItem", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("EvidenceFees");

                    b.Navigation("EvidenceItemMembers");

                    b.Navigation("ParentEvidenceItemMembers");

                    b.Navigation("UserMeterTypes");

                    b.Navigation("UserMeters");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.FailureReport", b =>
                {
                    b.Navigation("FailureReportAttachements");

                    b.Navigation("FailureReportsComments");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.HousingCommunity", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("CalendarEvents");

                    b.Navigation("CostInvoices");

                    b.Navigation("CostOthers");

                    b.Navigation("EvidenceItemMembers");

                    b.Navigation("EvidenceItems");

                    b.Navigation("EvidenceTypeItems");

                    b.Navigation("FailureReports");

                    b.Navigation("InternalMessages");

                    b.Navigation("Resolutions");

                    b.Navigation("UserMeterTypes");

                    b.Navigation("UserMeters");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.InternalMessage", b =>
                {
                    b.Navigation("InternalMessageConnections");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.Resolution", b =>
                {
                    b.Navigation("ResolutionVotes");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("CalendarEventMembers");

                    b.Navigation("CalendarEvents");

                    b.Navigation("EvidenceItemMemberCreatedBy");

                    b.Navigation("EvidenceItemMemberOwnedByUser");

                    b.Navigation("EvidenceItems");

                    b.Navigation("EvidenceTypeItems");

                    b.Navigation("FailureReportAttachements");

                    b.Navigation("FailureReports");

                    b.Navigation("FailureReportsComments");

                    b.Navigation("FromInternalMessages");

                    b.Navigation("FromUserInternalMessageConnections");

                    b.Navigation("RecievedByUserInternalMessageConnections");

                    b.Navigation("ResolutionVotes");

                    b.Navigation("Resolutions");

                    b.Navigation("ToInternalMessages");

                    b.Navigation("ToUserInternalMessageConnections");

                    b.Navigation("UserMeters");
                });

            modelBuilder.Entity("Hocomm.Database.Entities.UserMeterType", b =>
                {
                    b.Navigation("UserMeters");
                });
#pragma warning restore 612, 618
        }
    }
}
